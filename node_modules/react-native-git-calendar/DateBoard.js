/**
 * Created by git on 17/3/9.
 * @flow
 */

'use strict';

import React, {PropTypes} from 'react';
import {View, StyleSheet, Text, TouchableOpacity, Image, Dimensions , Platform} from 'react-native';
const Width = Dimensions.get('window').width
export default class DateBoard extends React.Component {
    static defaultProps={
        selectedColor:'blue',
        busyDayColor:'red'
    }
    static propTypes={
    }
    constructor(props, context)
    {
        super(props, context);

        this._onPress = this._onPress.bind(this)
    }

    isLeap(year) {
        return ((year % 100 == 0) ?  (year % 400 == 0 ? 1 : 0) : (year % 4 == 0) ? 1 : 0);
    };
    _firstDay
    render()
    {
        let myMonth, myYear = 0;
        if (this.props.month == 13) {    //当前为12月,则下一月要进一年
            myMonth = 1;
            myYear = this.props.year + 1;
        } else if (this.props.month == 0) {  //当前为1月,则上个月要退一年
            myMonth = 12;
            myYear = this.props.year - 1;
        } else {
            myMonth = this.props.month;
            myYear = this.props.year
        }
        let fd = new Date(myYear, myMonth -1, 1);
        this._firstDay = fd.getDay(); //返回表示星期的某一天的数字
        let monthDay = [31, 28 + this.isLeap(this.props.year), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

        let arr = [];
        // 前几天为空
        for (let i = 0; i < this._firstDay; i++) {
            arr.push(<View key={-i} style={styles.dateBox}/>)
        }

        //开始遍历日
        for (var i = 1; i < monthDay[myMonth -1] + 1; i++) {
            let day = i
            let selectedStyle = this.props.selectedDay === day?{backgroundColor:this.props.selectedColor}:null
            let mark = this.props.selectedDay === day? (
                <View style={[{position:'absolute',height:6,width:6,borderRadius:3,right:0,top:0},selectedStyle]}/>
            ):null
            arr.push(
                <TouchableOpacity  key={i}
                                   style={[styles.dateBox]}
                                   onPress={()=>this._onPress(myYear,myMonth,day)}>
                    <View style={[styles.dayView,]}>
                        <Text style={styles.dayText}>{i}</Text>
                        {mark}
                    </View>
                </TouchableOpacity>
            )
        }

        let androidHeight = Platform.OS === 'android' ?  this._firstDay > 4 ?{height:250}:{height:210}:null
        return (
            <View style={[styles.container,androidHeight]}>
                { arr}
            </View>
        );
    }

    _onPress(Year,Month,Day){
        this.props.onPress && this.props.onPress(Year,Month,Day)
    }
}

const styles = StyleSheet.create({
    container: {
        width: Width,
        flexDirection: 'row',
        flexWrap: 'wrap',
        backgroundColor: '#fff',
        borderBottomWidth:StyleSheet.hairlineWidth,
        borderBottomColor:'#ccc',
    },
    dateBox:{
        width:Width / 7 - 0.5,
        height:40,
        justifyContent:'center',
        alignItems:'center',
        backgroundColor:'#fff'
    },
    dayView:{
        height:20,
        width:26,
        backgroundColor:'#fff',
        justifyContent:'center',
        alignItems:'center',
    },
    dayText:{
        fontSize:12
    },
    lunarFont:{
        fontSize:10
    }
});

