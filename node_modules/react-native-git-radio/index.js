/**
 * Created by git on 17/4/7.
 * @flow
 */

'use strict';

import React, {PropTypes} from 'react';
import {View, StyleSheet, Text, TouchableOpacity, Image} from 'react-native';

class Item extends React.Component {
    static PropsType = {
        dataSource:PropTypes.string,
        onPress:PropTypes.func,
        multiSelect:PropTypes.bool
    }
    constructor(props, context)
    {
        super(props, context);
        this.state={
            selected:false,
        }
        this._onPress = this._onPress.bind(this)
    }

    componentWillReceiveProps(nextProps) {
        if(nextProps.onClickAll){   //点击了全选,根据全选的情况改变
            this.setState({
                selected: nextProps.clickAll
            });
        }else{   //点击了单个cell
            if(this.props.multiSelect === false){  //单选的情况
                this.setState({
                    selected:nextProps.dataSource === nextProps.radioValue
                })
            }
        }
    }
    render()
    {
        let {dataSource, selectedIcon, unselectedIcon, itemStyle}  = this.props
        let pic = this.state.selected?selectedIcon || require('./img/selected.png'):unselectedIcon || require('./img/unselected.png');
        let radio = <Image style={{marginLeft:10,alignSelf:'center'}} source={pic}/>
        return (
            <TouchableOpacity
                style={[{paddingVertical:10,flexDirection:'row',justifyContent:'space-between'},itemStyle]}
                onPress={this._onPress}>
                <Text>{dataSource.name}</Text>
                {radio}
            </TouchableOpacity>
        );
    }
    _onPress(){
        this.setState({selected:!this.state.selected})
        this.props.onPress && this.props.onPress(this.props.dataSource,!this.state.selected)
    }
}


class Radio extends React.Component
{
    static propTypes={
        dataSource:React.PropTypes.array.isRequired,
        selectedIcon:Image.propTypes.source,
        unselectedIcon:Image.propTypes.source,
        style:View.propTypes.style,
        itemStyle:View.propTypes.style
    }
    constructor(props, context) {
        super(props, context);
        this._onPress = this._onPress.bind(this)
    }
    _dataSource = ''
    render(){
        let {dataSource, selectedIcon, unselectedIcon, itemStyle}  = this.props
        let BottomView = dataSource.map((item,index)=>{
            return (
                <Item      dataSource={item}
                           radioValue={this._dataSource}
                           onPress={this._onPress}
                           multiSelect={false}
                           selectedIcon={selectedIcon}
                           unselectedIcon={unselectedIcon}
                           itemStyle={itemStyle}
                           key={index + 'radio'}
                />
            )
        })
        return (
            <View style={[styles.container,this.props.style]} >
                {BottomView}
            </View>
        );
    }
    _onPress(data,flag){
        if(flag){
            this._dataSource = data
            this.forceUpdate()
            this.props.currentSelect && this.props.currentSelect(this._dataSource)
        }else{
            this._dataSource = ''
        }
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
});

export default Radio;